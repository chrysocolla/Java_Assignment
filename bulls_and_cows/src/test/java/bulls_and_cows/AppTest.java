/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package bulls_and_cows;

import org.junit.Test;

import static org.junit.Assert.*;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.List;
import java.util.stream.Collectors;

import com.google.common.base.CharMatcher;

public class AppTest {

    private App app = new App();

    @Test
    public void testAppGetHint() {
        try {
            Method getHint = app.getClass().getDeclaredMethod("getHint", String.class, String.class);
            getHint.setAccessible(true);
            final String[] expecteds = new String[] { "2A2B", "1A0B", "0A1B", "1A2B", "2A1B", "0A0B", "4A0B", "0A4B" };
            final String[] actualsArguments = new String[] { "1324", "1567", "5671", "1425", "1245", "5678", "1234", "4321" };
            String[] actuals = new String[actualsArguments.length];
            for (int i = 0; i < actuals.length; i++)
                actuals[i] = getHint.invoke(null, "1234", actualsArguments[i]).toString();
            assertArrayEquals(
                "Private method \"getHint\" should work in mode DISTINCT",
                expecteds, actuals
            );
            final String[] indistinctExpecteds = new String[] { "3A0B", "2A1B", "1A1B", "0A3B" };
            final String[] indistinctActualsArguments = new String[] { "1234", "1334", "3334", "3324" };
            String[] indistinctActuals = new String[indistinctActualsArguments.length];
            for (int i = 0; i < indistinctActuals.length; i++)
            indistinctActuals[i] = getHint.invoke(null, "1233", indistinctActualsArguments[i]).toString();
            assertArrayEquals(
                "Private method \"getHint\" should work in mode INDISTINCT",
                indistinctExpecteds, indistinctActuals
            );
        } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
            e.printStackTrace();
            fail("Private method \"getHint\" can't be invoked with signature (String.class, String.class)");
        } catch (NoSuchMethodException | SecurityException e) {
            e.printStackTrace();
            fail("There is no method called \"getHint\" with signature (String.class, String.class)");
        }
    }

    @Test
    public void testAppGetSecret() {
        try {
            Method getSecret = app.getClass().getDeclaredMethod("getSecret", Integer.class, App.Mode.class);
            getSecret.setAccessible(true);
            String secret;
            for (App.Mode mode : App.Mode.values()) {
                if (mode != App.Mode.USERINPUT) {
                    secret = getSecret.invoke(null, 4, mode).toString();
                    if (mode == App.Mode.DISTINCT) {
                        assertEquals(
                            String.format("Private method \"getSecret\"should work in mode %s: check is distinct", mode.toString()),
                            secret.length(),
                            List.of(secret.split("")).stream().distinct().collect(Collectors.toList()).size()
                        );
                    }
                    assertTrue(
                        String.format("Private method \"getSecret\"should work in mode %s: check number", mode.toString()),
                        CharMatcher.inRange('0', '9').matchesAllOf(secret)
                    );
                    assertEquals(
                        String.format("Private method \"getSecret\"should work in mode %s: check length", mode.toString()),
                        4, secret.length()
                    );
                }
            }
        } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
            e.printStackTrace();
            fail("Private method \"getSecret\" can't be invoked with signature (Integer.class, App.Mode.class)");
        } catch (NoSuchMethodException | SecurityException e) {
            e.printStackTrace();
            fail("There is no method called \"getSecret\" with signature (Integer.class, App.Mode.class)");
        }
    }
}
