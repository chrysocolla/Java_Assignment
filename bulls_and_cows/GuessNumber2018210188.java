/*
 * This Java source file was modified to meet the requirement of assignment grading.
 * Originally generated by the Gradle 'init' task.
 */
import java.util.Random;
import java.util.Scanner;
import java.util.HashSet;

public class GuessNumber2018210188 {

    public static void main(final String[] args) {
        runLoop(
            runArguments(args),
            args.length == 3 && args[0].matches("^(-g|--game)$")
        );
    }

    enum Mode { DISTINCT, USERINPUT, INDISTINCT; }

    private static final Random random = new Random();

    private static final Scanner scanner = new Scanner(System.in);

    private static String runArguments(final String[] args) {
        if (args.length == 1 && args[0].matches("^(-h|--help)$")) {
            System.out.print(
                "bulls_and_cows: 猜数字游戏\n" +
                "  usage: java <CLASS_NAME> [ARGUMENTS]\n" +
                "         java GuessNumber2018210188.java [ARGUMENTS] *仅限于使用JDK 11及以上\n" +
                "  ARGUMENTS:\n" +
                "    -h, --help: 打印此帮助文本\n" +
                "    -g, --game: <LENGTH_OF_SECRET> <MODE>:\n" +
                "      LENGTH_OF_SECRET: 从 4 到 9 的数字\n" +
                "        指定希望猜测的密文长度。\n" +
                "      MODE: [d|i|u] 或 [distinct|indistinct|userinput]\n" +
                "        指定用于生成密文的模式。\n" +
                "          [d, distinct]: 密文中数字不重复\n" +
                "          i, indistinct: 密文中数字允许重复\n" +
                "          u, userinput : 密文由用户输入\n"
            );
            System.exit(0);
            return null;
        }

        Integer length;
        Mode mode;
        String lengthString;
        String modeString;

        if (args.length == 3 && args[0].matches("^(-g|--game)$")) {
            lengthString = args[1];
            modeString = args[2];
            if (!lengthString.matches("^[4-9]?$")) {
                System.out.format(
                    "命令行参数有误\n" +
                    "应为从 4 到 9 的整数或空串\n" +
                    "输入为：%s",
                    lengthString
                );
                System.exit(1);
                return null;
            }
            if (!modeString.matches("^([diu]|distinct|indistinct|userinput)?$")) {
                System.out.format(
                    "命令行参数有误\n" +
                    "应为 [d|i|u] 或 [distinct|indistinct|userinput]\n" +
                    "输入为：%s",
                    modeString
                );
                System.exit(1);
                return null;
            }
        } else {
            while(!(
                lengthString = prompt(
                    "请输入希望猜测的密文长度{[4]-9} > "
                )
            ).matches("^[4-9]?$"));
            while(!(
                modeString = prompt(
                    "请输入用于生成密文的模式：\n" +
                    "  [d, distinct]：不重复\n" +
                    "  i, indistinct：允许重复\n" +
                    "  u, userinput ：用户输入\n" +
                    "  > "
                )
            ).matches("^([diu]|distinct|indistinct|userinput)?$"));
        }

        length = Integer.parseInt(
            lengthString.length() == 0 ? "4" : lengthString
        );
        switch (modeString) {
            default:
            case "d":
            case "distinct":
                mode = Mode.DISTINCT;
                break;
            case "i":
            case "indistinct":
                mode = Mode.INDISTINCT;
                break;
            case "u":
            case "userinput":
                mode = Mode.USERINPUT;
                break;
        }

        return getSecret(length, mode);
    }

    private static void runLoop(final String secret, final Boolean autoQuit) {
        String hint;
        String guess;
        Boolean result;
        Integer count = 0;
        do {
            while (!(
                guess = prompt(String.format("请输入猜测(长度%d) > ", secret.length()))
            ).matches(String.format("^\\d{%s}$", secret.length())));
            hint = getHint(secret, guess);
            result = hint.equals(String.format("%dA0B", secret.length()));
            System.out.format(
                "%s：%s，尝试次数：%d%n",
                Boolean.TRUE.equals(result) ? "正确" : "错误",
                hint,
                ++count
            );
        } while (Boolean.FALSE.equals(result));
        if (
            Boolean.TRUE.equals(autoQuit) ||
            prompt("继续下一轮猜测吗[y]n：").equals("n")
        ) {
            System.exit(0);
            return;
        }
        runLoop(runArguments(new String[0]), false);
    }

    private static String prompt(final String message) {
        System.out.print(message);
        return scanner.nextLine().trim();
    }

    private static String getSecret(final Integer length, final Mode mode) {
        switch (mode) {
            default:
            case DISTINCT:
                final HashSet<String> secretSet = new HashSet<>(10);
                while (secretSet.size() < length)
                    secretSet.add((Integer.valueOf(random.nextInt(10))).toString());
                return String.join("", secretSet);
            case INDISTINCT:
                StringBuilder secretBuilder = new StringBuilder("");
                while (secretBuilder.length() < length)
                    secretBuilder.append(
                        (Integer.valueOf(random.nextInt(10))).toString()
                    );
                return secretBuilder.toString();
            case USERINPUT:
                String secretString;
                while (!(
                    secretString = String.valueOf(
                        prompt(String.format("请输入密文(长度%d) > ", length))
                    ).trim()
                ).matches(String.format("^\\d{%d}$", length)));
                return secretString;
        }
    }

    private static String getHint(final String secret, final String guess) {
        int bulls = 0;
        int cows = 0;
        final int[] numbers = new int[10];
        for (int i = 0; i < secret.length(); i++) {
            if (secret.charAt(i) == guess.charAt(i)) bulls++;
            else {
                if (numbers[secret.charAt(i) - '0'] ++ < 0) cows++;
                if (numbers[guess.charAt(i) - '0'] -- > 0) cows++;
            }
        }
        return String.format("%sA%sB", bulls, cows);
    }

}
